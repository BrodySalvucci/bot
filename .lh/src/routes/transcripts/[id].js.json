{
    "sourceFile": "src/routes/transcripts/[id].js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1737684397746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1737684485150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+const fs = require('fs');\n+\n module.exports.get = fastify => ({\n \thandler: async (req, res) => {\n \t\t/** @type {import('client')} */\n \t\tconst client = req.routeOptions.config.client;\n"
                },
                {
                    "date": 1737684629700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,30 @@\n \t\t\t\t\tstatusCode: 404,\n \t\t\t\t});\n \t\t\t}\n \n-\t\t\tconst transcriptPath = `./user/transcripts/${ticketId}.md`;\n+\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n+\t\t\tinclude: {\n+\t\t\t\tcategory: true,\n+\t\t\t\tcreatedBy: true,\n+\t\t\t},\n+\t\t\twhere: { id: ticketId },\n+\t\t});\n+\n+\t\tif (!ticket) {\n+\t\t\treturn res.code(404).send({\n+\t\t\t\terror: 'Not Found',\n+\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\tstatusCode: 404,\n+\t\t\t});\n+\t\t}\n+\n+\t\tconst channelName = ticket.category.channelName\n+\t\t\t.replace(/{+\\s?(user)?name\\s?}+/gi, ticket.createdBy?.username)\n+\t\t\t.replace(/{+\\s?(nick|display)(name)?\\s?}+/gi, ticket.createdBy?.displayName)\n+\t\t\t.replace(/{+\\s?num(ber)?\\s?}+/gi, ticket.number);\n+\t\tconst extension = client.config.templates.transcript.split('.').slice(-1)[0];\n+\t\tconst transcriptPath = `./user/transcripts/${channelName}.${extension}`;\n \t\t\tif (!fs.existsSync(transcriptPath)) {\n \t\t\t\treturn res.code(404).send({\n \t\t\t\t\terror: 'Not Found',\n \t\t\t\t\tmessage: 'The requested transcript could not be found.',\n"
                },
                {
                    "date": 1737684715543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+const fs = require('fs');\n+\n+module.exports.get = fastify => ({\n+\thandler: async (req, res) => {\n+\t\t/** @type {import('client')} */\n+\t\tconst client = req.routeOptions.config.client;\n+\t\tconst ticketId = req.params.id;\n+\n+\t\ttry {\n+\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n+\t\t\tinclude: {\n+\t\t\t\tcategory: true,\n+\t\t\t\tcreatedBy: true,\n+\t\t\t},\n+\t\t\twhere: { id: ticketId },\n+\t\t});\n+\n+\t\tif (!ticket) {\n+\t\t\treturn res.code(404).send({\n+\t\t\t\terror: 'Not Found',\n+\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\tstatusCode: 404,\n+\t\t\t});\n+\t\t}\n+\n+\t\tconst channelName = ticket.category.channelName\n+\t\t\t.replace(/{+\\s?(user)?name\\s?}+/gi, ticket.createdBy?.username)\n+\t\t\t.replace(/{+\\s?(nick|display)(name)?\\s?}+/gi, ticket.createdBy?.displayName)\n+\t\t\t.replace(/{+\\s?num(ber)?\\s?}+/gi, ticket.number);\n+\t\tconst extension = client.config.templates.transcript.split('.').slice(-1)[0];\n+\t\tconst transcriptPath = `./user/transcripts/${channelName}.${extension}`;\n+\t\t\tif (!fs.existsSync(transcriptPath)) {\n+\t\t\t\treturn res.code(404).send({\n+\t\t\t\t\terror: 'Not Found',\n+\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\t\tstatusCode: 404,\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\tconst transcript = fs.readFileSync(transcriptPath, 'utf8');\n+\t\t\treturn res.type('text/markdown').send(transcript);\n+\t\t} catch (error) {\n+\t\t\tclient.log.error.http(error);\n+\t\t\treturn res.code(500).send({\n+\t\t\t\terror: 'Internal Server Error',\n+\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n+\t\t\t\tstatusCode: 500,\n+\t\t\t});\n+\t\t}\n+\t},\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737685369295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+const fs = require('fs');\n+const marked = require('marked');\n+\n+module.exports.get = fastify => ({\n+\thandler: async (req, res) => {\n+\t\t/** @type {import('client')} */\n+\t\tconst client = req.routeOptions.config.client;\n+\t\tconst ticketId = req.params.id;\n+\n+\t\ttry {\n+\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n+\t\t\tinclude: {\n+\t\t\t\tcategory: true,\n+\t\t\t\tcreatedBy: true,\n+\t\t\t},\n+\t\t\twhere: { id: ticketId },\n+\t\t});\n+\n+\t\tif (!ticket) {\n+\t\t\treturn res.code(404).send({\n+\t\t\t\terror: 'Not Found',\n+\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\tstatusCode: 404,\n+\t\t\t});\n+\t\t}\n+\n+\t\tconst channelName = ticket.category.channelName\n+\t\t\t.replace(/{+\\s?(user)?name\\s?}+/gi, ticket.createdBy?.username)\n+\t\t\t.replace(/{+\\s?(nick|display)(name)?\\s?}+/gi, ticket.createdBy?.displayName)\n+\t\t\t.replace(/{+\\s?num(ber)?\\s?}+/gi, ticket.number);\n+\t\tconst extension = client.config.templates.transcript.split('.').slice(-1)[0];\n+\t\tconst transcriptPath = `./user/transcripts/${channelName}.${extension}`;\n+\t\t\tif (!fs.existsSync(transcriptPath)) {\n+\t\t\t\treturn res.code(404).send({\n+\t\t\t\t\terror: 'Not Found',\n+\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\t\tstatusCode: 404,\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\tconst markdown = fs.readFileSync(transcriptPath, 'utf8');\n+\t\t\tconst html = marked.parse(markdown);\n+\t\t\tconst styledHtml = `\n+\t\t\t<!DOCTYPE html>\n+\t\t\t<html>\n+\t\t\t<head>\n+\t\t\t\t<meta charset=\"utf-8\">\n+\t\t\t\t<title>Ticket Transcript - ${channelName}</title>\n+\t\t\t\t<style>\n+\t\t\t\t\tbody {\n+\t\t\t\t\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n+\t\t\t\t\t\tline-height: 1.6;\n+\t\t\t\t\t\tcolor: #2f3136;\n+\t\t\t\t\t\tmax-width: 900px;\n+\t\t\t\t\t\tmargin: 0 auto;\n+\t\t\t\t\t\tpadding: 20px;\n+\t\t\t\t\t\tbackground: #ffffff;\n+\t\t\t\t\t}\n+\t\t\t\t\th1, h2, h3 { color: #202225; }\n+\t\t\t\t\tcode { background: #f6f6f7; padding: 2px 4px; border-radius: 3px; }\n+\t\t\t\t\tpre { background: #2f3136; color: #ffffff; padding: 16px; border-radius: 4px; overflow-x: auto; }\n+\t\t\t\t\tblockquote { border-left: 4px solid #00b0f4; margin: 0; padding-left: 16px; color: #4f545c; }\n+\t\t\t\t\ta { color: #00b0f4; text-decoration: none; }\n+\t\t\t\t\ta:hover { text-decoration: underline; }\n+\t\t\t\t</style>\n+\t\t\t</head>\n+\t\t\t<body>\n+\t\t\t\t${html}\n+\t\t\t</body>\n+\t\t\t</html>`;\n+\t\t\treturn res.type('text/html').send(styledHtml);\n+\t\t} catch (error) {\n+\t\t\tclient.log.error.http(error);\n+\t\t\treturn res.code(500).send({\n+\t\t\t\terror: 'Internal Server Error',\n+\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n+\t\t\t\tstatusCode: 500,\n+\t\t\t});\n+\t\t}\n+\t},\n+});\n"
                },
                {
                    "date": 1737685369931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,5 +77,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737685702465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+const fs = require('fs');\n+const path = require('path');\n+const marked = require('marked');\n+const Mustache = require('mustache');\n+\n+module.exports.get = fastify => ({\n+\thandler: async (req, res) => {\n+\t\t/** @type {import('client')} */\n+\t\tconst client = req.routeOptions.config.client;\n+\t\tconst ticketId = req.params.id;\n+\n+\t\ttry {\n+\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n+\t\t\t\tinclude: {\n+\t\t\t\t\tcategory: true,\n+\t\t\t\t\tcreatedBy: true,\n+\t\t\t\t\tclosedBy: true,\n+\t\t\t\t\tclaimedBy: true,\n+\t\t\t\t\tfeedback: true,\n+\t\t\t\t\tmessages: {\n+\t\t\t\t\t\tinclude: {\n+\t\t\t\t\t\t\tauthor: true,\n+\t\t\t\t\t\t\tattachments: true\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\twhere: { id: ticketId },\n+\t\t\t});\n+\n+\t\t\tif (!ticket) {\n+\t\t\t\treturn res.code(404).send({\n+\t\t\t\t\terror: 'Not Found',\n+\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\t\tstatusCode: 404,\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\tconst templatePath = path.join(process.cwd(), 'src', 'user', 'templates', 'transcript.html');\n+\t\t\tconst template = fs.readFileSync(templatePath, 'utf8');\n+\n+\t\t\tconst data = {\n+\t\t\t\tticket,\n+\t\t\t\tguildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n+\t\t\t\ttimestamp: new Date().toLocaleString(),\n+\t\t\t\tmessages: ticket.messages.map(msg => ({\n+\t\t\t\t\t...msg,\n+\t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n+\t\t\t\t\tauthor: {\n+\t\t\t\t\t\t...msg.author,\n+\t\t\t\t\t\tavatarURL: msg.author.avatar\n+\t\t\t\t\t\t\t? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png`\n+\t\t\t\t\t\t\t: `https://cdn.discordapp.com/embed/avatars/${Number(msg.author.discriminator) % 5}.png`\n+\t\t\t\t\t}\n+\t\t\t\t}))\n+\t\t\t};\n+\n+\t\t\tconst html = Mustache.render(template, data);\n+\t\t\treturn res.type('text/html').send(html);\n+\t\t} catch (error) {\n+\t\t\tclient.log.error.http(error);\n+\t\t\treturn res.code(500).send({\n+\t\t\t\terror: 'Internal Server Error',\n+\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n+\t\t\t\tstatusCode: 500,\n+\t\t\t});\n+\t\t}\n+\t},\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737685807562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,13 +16,14 @@\n \t\t\t\t\tcreatedBy: true,\n \t\t\t\t\tclosedBy: true,\n \t\t\t\t\tclaimedBy: true,\n \t\t\t\t\tfeedback: true,\n-\t\t\t\t\tmessages: {\n+\t\t\t\t\tarchivedMessages: {\n \t\t\t\t\t\tinclude: {\n \t\t\t\t\t\t\tauthor: true,\n \t\t\t\t\t\t\tattachments: true\n-\t\t\t\t\t\t}\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\torderBy: { createdAt: 'asc' }\n \t\t\t\t\t}\n \t\t\t\t},\n \t\t\t\twhere: { id: ticketId },\n \t\t\t});\n@@ -41,9 +42,9 @@\n \t\t\tconst data = {\n \t\t\t\tticket,\n \t\t\t\tguildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n \t\t\t\ttimestamp: new Date().toLocaleString(),\n-\t\t\t\tmessages: ticket.messages.map(msg => ({\n+\t\t\t\tmessages: ticket.archivedMessages.map(msg => ({\n \t\t\t\t\t...msg,\n \t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n \t\t\t\t\tauthor: {\n \t\t\t\t\t\t...msg.author,\n@@ -65,199 +66,4 @@\n \t\t\t});\n \t\t}\n \t},\n });\n-const fs = require('fs');\n-const marked = require('marked');\n-\n-module.exports.get = fastify => ({\n-\thandler: async (req, res) => {\n-\t\t/** @type {import('client')} */\n-\t\tconst client = req.routeOptions.config.client;\n-\t\tconst ticketId = req.params.id;\n-\n-\t\ttry {\n-\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n-\t\t\tinclude: {\n-\t\t\t\tcategory: true,\n-\t\t\t\tcreatedBy: true,\n-\t\t\t},\n-\t\t\twhere: { id: ticketId },\n-\t\t});\n-\n-\t\tif (!ticket) {\n-\t\t\treturn res.code(404).send({\n-\t\t\t\terror: 'Not Found',\n-\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\tstatusCode: 404,\n-\t\t\t});\n-\t\t}\n-\n-\t\tconst channelName = ticket.category.channelName\n-\t\t\t.replace(/{+\\s?(user)?name\\s?}+/gi, ticket.createdBy?.username)\n-\t\t\t.replace(/{+\\s?(nick|display)(name)?\\s?}+/gi, ticket.createdBy?.displayName)\n-\t\t\t.replace(/{+\\s?num(ber)?\\s?}+/gi, ticket.number);\n-\t\tconst extension = client.config.templates.transcript.split('.').slice(-1)[0];\n-\t\tconst transcriptPath = `./user/transcripts/${channelName}.${extension}`;\n-\t\t\tif (!fs.existsSync(transcriptPath)) {\n-\t\t\t\treturn res.code(404).send({\n-\t\t\t\t\terror: 'Not Found',\n-\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\t\tstatusCode: 404,\n-\t\t\t\t});\n-\t\t\t}\n-\n-\t\t\tconst markdown = fs.readFileSync(transcriptPath, 'utf8');\n-\t\t\tconst html = marked.parse(markdown);\n-\t\t\tconst styledHtml = `\n-\t\t\t<!DOCTYPE html>\n-\t\t\t<html>\n-\t\t\t<head>\n-\t\t\t\t<meta charset=\"utf-8\">\n-\t\t\t\t<title>Ticket Transcript - ${channelName}</title>\n-\t\t\t\t<style>\n-\t\t\t\t\tbody {\n-\t\t\t\t\t\tfont-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n-\t\t\t\t\t\tline-height: 1.6;\n-\t\t\t\t\t\tcolor: #2f3136;\n-\t\t\t\t\t\tmax-width: 900px;\n-\t\t\t\t\t\tmargin: 0 auto;\n-\t\t\t\t\t\tpadding: 20px;\n-\t\t\t\t\t\tbackground: #ffffff;\n-\t\t\t\t\t}\n-\t\t\t\t\th1, h2, h3 { color: #202225; }\n-\t\t\t\t\tcode { background: #f6f6f7; padding: 2px 4px; border-radius: 3px; }\n-\t\t\t\t\tpre { background: #2f3136; color: #ffffff; padding: 16px; border-radius: 4px; overflow-x: auto; }\n-\t\t\t\t\tblockquote { border-left: 4px solid #00b0f4; margin: 0; padding-left: 16px; color: #4f545c; }\n-\t\t\t\t\ta { color: #00b0f4; text-decoration: none; }\n-\t\t\t\t\ta:hover { text-decoration: underline; }\n-\t\t\t\t</style>\n-\t\t\t</head>\n-\t\t\t<body>\n-\t\t\t\t${html}\n-\t\t\t</body>\n-\t\t\t</html>`;\n-\t\t\treturn res.type('text/html').send(styledHtml);\n-\t\t} catch (error) {\n-\t\t\tclient.log.error.http(error);\n-\t\t\treturn res.code(500).send({\n-\t\t\t\terror: 'Internal Server Error',\n-\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n-\t\t\t\tstatusCode: 500,\n-\t\t\t});\n-\t\t}\n-\t},\n-});\n-const fs = require('fs');\n-\n-module.exports.get = fastify => ({\n-\thandler: async (req, res) => {\n-\t\t/** @type {import('client')} */\n-\t\tconst client = req.routeOptions.config.client;\n-\t\tconst ticketId = req.params.id;\n-\n-\t\ttry {\n-\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n-\t\t\tinclude: {\n-\t\t\t\tcategory: true,\n-\t\t\t\tcreatedBy: true,\n-\t\t\t},\n-\t\t\twhere: { id: ticketId },\n-\t\t});\n-\n-\t\tif (!ticket) {\n-\t\t\treturn res.code(404).send({\n-\t\t\t\terror: 'Not Found',\n-\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\tstatusCode: 404,\n-\t\t\t});\n-\t\t}\n-\n-\t\tconst channelName = ticket.category.channelName\n-\t\t\t.replace(/{+\\s?(user)?name\\s?}+/gi, ticket.createdBy?.username)\n-\t\t\t.replace(/{+\\s?(nick|display)(name)?\\s?}+/gi, ticket.createdBy?.displayName)\n-\t\t\t.replace(/{+\\s?num(ber)?\\s?}+/gi, ticket.number);\n-\t\tconst extension = client.config.templates.transcript.split('.').slice(-1)[0];\n-\t\tconst transcriptPath = `./user/transcripts/${channelName}.${extension}`;\n-\t\t\tif (!fs.existsSync(transcriptPath)) {\n-\t\t\t\treturn res.code(404).send({\n-\t\t\t\t\terror: 'Not Found',\n-\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\t\tstatusCode: 404,\n-\t\t\t\t});\n-\t\t\t}\n-\n-\t\t\tconst transcript = fs.readFileSync(transcriptPath, 'utf8');\n-\t\t\treturn res.type('text/markdown').send(transcript);\n-\t\t} catch (error) {\n-\t\t\tclient.log.error.http(error);\n-\t\t\treturn res.code(500).send({\n-\t\t\t\terror: 'Internal Server Error',\n-\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n-\t\t\t\tstatusCode: 500,\n-\t\t\t});\n-\t\t}\n-\t},\n-});\n-const fs = require('fs');\n-\n-module.exports.get = fastify => ({\n-\thandler: async (req, res) => {\n-\t\t/** @type {import('client')} */\n-\t\tconst client = req.routeOptions.config.client;\n-\t\tconst ticketId = req.params.id;\n-\n-\t\ttry {\n-\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n-\t\t\t\twhere: { id: ticketId },\n-\t\t\t});\n-\n-\t\t\tif (!ticket) {\n-\t\t\t\treturn res.code(404).send({\n-\t\t\t\t\terror: 'Not Found',\n-\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\t\tstatusCode: 404,\n-\t\t\t\t});\n-\t\t\t}\n-\n-\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n-\t\t\tinclude: {\n-\t\t\t\tcategory: true,\n-\t\t\t\tcreatedBy: true,\n-\t\t\t},\n-\t\t\twhere: { id: ticketId },\n-\t\t});\n-\n-\t\tif (!ticket) {\n-\t\t\treturn res.code(404).send({\n-\t\t\t\terror: 'Not Found',\n-\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\tstatusCode: 404,\n-\t\t\t});\n-\t\t}\n-\n-\t\tconst channelName = ticket.category.channelName\n-\t\t\t.replace(/{+\\s?(user)?name\\s?}+/gi, ticket.createdBy?.username)\n-\t\t\t.replace(/{+\\s?(nick|display)(name)?\\s?}+/gi, ticket.createdBy?.displayName)\n-\t\t\t.replace(/{+\\s?num(ber)?\\s?}+/gi, ticket.number);\n-\t\tconst extension = client.config.templates.transcript.split('.').slice(-1)[0];\n-\t\tconst transcriptPath = `./user/transcripts/${channelName}.${extension}`;\n-\t\t\tif (!fs.existsSync(transcriptPath)) {\n-\t\t\t\treturn res.code(404).send({\n-\t\t\t\t\terror: 'Not Found',\n-\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\t\tstatusCode: 404,\n-\t\t\t\t});\n-\t\t\t}\n-\n-\t\t\tconst transcript = fs.readFileSync(transcriptPath, 'utf8');\n-\t\t\treturn res.type('text/markdown').send(transcript);\n-\t\t} catch (error) {\n-\t\t\tclient.log.error.http(error);\n-\t\t\treturn res.code(500).send({\n-\t\t\t\terror: 'Internal Server Error',\n-\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n-\t\t\t\tstatusCode: 500,\n-\t\t\t});\n-\t\t}\n-\t},\n-});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737685808125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,5 +65,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737685907867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,9 @@\n \t\t\t\t\tclaimedBy: true,\n \t\t\t\t\tfeedback: true,\n \t\t\t\t\tarchivedMessages: {\n \t\t\t\t\t\tinclude: {\n-\t\t\t\t\t\t\tauthor: true,\n-\t\t\t\t\t\t\tattachments: true\n+\t\t\t\t\t\t\tauthor: true\n \t\t\t\t\t\t},\n \t\t\t\t\t\torderBy: { createdAt: 'asc' }\n \t\t\t\t\t}\n \t\t\t\t},\n@@ -65,5 +64,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n\\ No newline at end of file\n+});\n"
                },
                {
                    "date": 1737686077977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n const fs = require('fs');\n const path = require('path');\n const marked = require('marked');\n const Mustache = require('mustache');\n+const Cryptr = require('cryptr');\n+const { decrypt } = new Cryptr(process.env.ENCRYPTION_KEY);\n \n module.exports.get = fastify => ({\n \thandler: async (req, res) => {\n \t\t/** @type {import('client')} */\n@@ -37,13 +39,24 @@\n \n \t\t\tconst templatePath = path.join(process.cwd(), 'src', 'user', 'templates', 'transcript.html');\n \t\t\tconst template = fs.readFileSync(templatePath, 'utf8');\n \n-\t\t\tconst data = {\n-\t\t\t\tticket,\n-\t\t\t\tguildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n-\t\t\t\ttimestamp: new Date().toLocaleString(),\n-\t\t\t\tmessages: ticket.archivedMessages.map(msg => ({\n+\t\t\tif (ticket.closedReason) ticket.closedReason = decrypt(ticket.closedReason);\n+if (ticket.feedback?.comment) ticket.feedback.comment = decrypt(ticket.feedback.comment);\n+if (ticket.topic) ticket.topic = decrypt(ticket.topic);\n+\n+ticket.archivedMessages.forEach((message, i) => {\n+    message.content = JSON.parse(decrypt(message.content));\n+    message.text = message.content.content?.replace(/\\n/g, '\\n\\t') ?? '';\n+    message.content.attachments?.forEach(a => (message.text += '\\n\\t' + a.url));\n+    message.content.embeds?.forEach(() => (message.text += '\\n\\t[embedded content]'));\n+});\n+\n+const data = {\n+    ticket,\n+    guildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n+    timestamp: new Date().toLocaleString(),\n+    messages: ticket.archivedMessages.map(msg => ({\n \t\t\t\t\t...msg,\n \t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n \t\t\t\t\tauthor: {\n \t\t\t\t\t\t...msg.author,\n@@ -64,5 +77,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737686210514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+const fs = require('fs');\n+const path = require('path');\n+const marked = require('marked');\n+const Mustache = require('mustache');\n+const Cryptr = require('cryptr');\n+const { decrypt } = new Cryptr(process.env.ENCRYPTION_KEY);\n+\n+module.exports.get = fastify => ({\n+\thandler: async (req, res) => {\n+\t\t/** @type {import('client')} */\n+\t\tconst client = req.routeOptions.config.client;\n+\t\tconst ticketId = req.params.id;\n+\n+\t\ttry {\n+\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n+\t\t\t\tinclude: {\n+\t\t\t\t\tcategory: true,\n+\t\t\t\t\tcreatedBy: true,\n+\t\t\t\t\tclosedBy: true,\n+\t\t\t\t\tclaimedBy: true,\n+\t\t\t\t\tfeedback: true,\n+\t\t\t\t\tarchivedMessages: {\n+\t\t\t\t\t\tinclude: {\n+\t\t\t\t\t\t\tauthor: true\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\torderBy: { createdAt: 'asc' }\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\twhere: { id: ticketId },\n+\t\t\t});\n+\n+\t\t\tif (!ticket) {\n+\t\t\t\treturn res.code(404).send({\n+\t\t\t\t\terror: 'Not Found',\n+\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\t\tstatusCode: 404,\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\t// Decrypt ticket metadata\n+\t\t\tif (ticket.closedReason) ticket.closedReason = decrypt(ticket.closedReason);\n+\t\t\tif (ticket.feedback?.comment) ticket.feedback.comment = decrypt(ticket.feedback.comment);\n+\t\t\tif (ticket.topic) ticket.topic = decrypt(ticket.topic);\n+\n+\t\t\t// Decrypt user information\n+\t\t\tif (ticket.createdBy?.username) ticket.createdBy.username = decrypt(ticket.createdBy.username);\n+\t\t\tif (ticket.createdBy?.displayName) ticket.createdBy.displayName = decrypt(ticket.createdBy.displayName);\n+\t\t\tif (ticket.closedBy?.username) ticket.closedBy.username = decrypt(ticket.closedBy.username);\n+\t\t\tif (ticket.closedBy?.displayName) ticket.closedBy.displayName = decrypt(ticket.closedBy.displayName);\n+\t\t\tif (ticket.claimedBy?.username) ticket.claimedBy.username = decrypt(ticket.claimedBy.username);\n+\t\t\tif (ticket.claimedBy?.displayName) ticket.claimedBy.displayName = decrypt(ticket.claimedBy.displayName);\n+\n+\t\t\t// Decrypt and process archived messages\n+\t\t\tticket.archivedMessages.forEach((message, i) => {\n+\t\t\t\t// Decrypt author information\n+\t\t\t\tif (message.author?.username) message.author.username = decrypt(message.author.username);\n+\t\t\t\tif (message.author?.displayName) message.author.displayName = decrypt(message.author.displayName);\n+\n+\t\t\t\t// Decrypt message content\n+\t\t\t\tmessage.content = JSON.parse(decrypt(message.content));\n+\t\t\t\tmessage.text = message.content.content?.replace(/\\n/g, '\\n\\t') ?? '';\n+\t\t\t\tmessage.content.attachments?.forEach(a => (message.text += '\\n\\t' + a.url));\n+\t\t\t\tmessage.content.embeds?.forEach(() => (message.text += '\\n\\t[embedded content]'));\n+\t\t\t});\n+\n+\t\t\tconst templatePath = path.join(process.cwd(), 'src', 'user', 'templates', 'transcript.html');\n+\t\t\tconst template = fs.readFileSync(templatePath, 'utf8');\n+\n+\t\t\tconst data = {\n+\t\t\t\tticket,\n+\t\t\t\tguildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n+\t\t\t\ttimestamp: new Date().toLocaleString(),\n+\t\t\t\tmessages: ticket.archivedMessages.map(msg => ({\n+\t\t\t\t\t...msg,\n+\t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n+\t\t\t\t\tauthor: {\n+\t\t\t\t\t\t...msg.author,\n+\t\t\t\t\t\tavatarURL: msg.author.avatar\n+\t\t\t\t\t\t\t? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png`\n+\t\t\t\t\t\t\t: `https://cdn.discordapp.com/embed/avatars/${Number(msg.author.discriminator) % 5}.png`\n+\t\t\t\t\t}\n+\t\t\t\t}))\n+\t\t\t};\n+\n+\t\t\tconst html = Mustache.render(template, data);\n+\t\t\treturn res.type('text/html').send(html);\n+\t\t} catch (error) {\n+\t\t\tclient.log.error.http(error);\n+\t\t\treturn res.code(500).send({\n+\t\t\t\terror: 'Internal Server Error',\n+\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n+\t\t\t\tstatusCode: 500,\n+\t\t\t});\n+\t\t}\n+\t},\n+});\n"
                },
                {
                    "date": 1737686211217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,86 +92,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n-const fs = require('fs');\n-const path = require('path');\n-const marked = require('marked');\n-const Mustache = require('mustache');\n-const Cryptr = require('cryptr');\n-const { decrypt } = new Cryptr(process.env.ENCRYPTION_KEY);\n-\n-module.exports.get = fastify => ({\n-\thandler: async (req, res) => {\n-\t\t/** @type {import('client')} */\n-\t\tconst client = req.routeOptions.config.client;\n-\t\tconst ticketId = req.params.id;\n-\n-\t\ttry {\n-\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n-\t\t\t\tinclude: {\n-\t\t\t\t\tcategory: true,\n-\t\t\t\t\tcreatedBy: true,\n-\t\t\t\t\tclosedBy: true,\n-\t\t\t\t\tclaimedBy: true,\n-\t\t\t\t\tfeedback: true,\n-\t\t\t\t\tarchivedMessages: {\n-\t\t\t\t\t\tinclude: {\n-\t\t\t\t\t\t\tauthor: true\n-\t\t\t\t\t\t},\n-\t\t\t\t\t\torderBy: { createdAt: 'asc' }\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\twhere: { id: ticketId },\n-\t\t\t});\n-\n-\t\t\tif (!ticket) {\n-\t\t\t\treturn res.code(404).send({\n-\t\t\t\t\terror: 'Not Found',\n-\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n-\t\t\t\t\tstatusCode: 404,\n-\t\t\t\t});\n-\t\t\t}\n-\n-\t\t\tconst templatePath = path.join(process.cwd(), 'src', 'user', 'templates', 'transcript.html');\n-\t\t\tconst template = fs.readFileSync(templatePath, 'utf8');\n-\n-\t\t\tif (ticket.closedReason) ticket.closedReason = decrypt(ticket.closedReason);\n-if (ticket.feedback?.comment) ticket.feedback.comment = decrypt(ticket.feedback.comment);\n-if (ticket.topic) ticket.topic = decrypt(ticket.topic);\n-\n-ticket.archivedMessages.forEach((message, i) => {\n-    message.content = JSON.parse(decrypt(message.content));\n-    message.text = message.content.content?.replace(/\\n/g, '\\n\\t') ?? '';\n-    message.content.attachments?.forEach(a => (message.text += '\\n\\t' + a.url));\n-    message.content.embeds?.forEach(() => (message.text += '\\n\\t[embedded content]'));\n-});\n-\n-const data = {\n-    ticket,\n-    guildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n-    timestamp: new Date().toLocaleString(),\n-    messages: ticket.archivedMessages.map(msg => ({\n-\t\t\t\t\t...msg,\n-\t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n-\t\t\t\t\tauthor: {\n-\t\t\t\t\t\t...msg.author,\n-\t\t\t\t\t\tavatarURL: msg.author.avatar\n-\t\t\t\t\t\t\t? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png`\n-\t\t\t\t\t\t\t: `https://cdn.discordapp.com/embed/avatars/${Number(msg.author.discriminator) % 5}.png`\n-\t\t\t\t\t}\n-\t\t\t\t}))\n-\t\t\t};\n-\n-\t\t\tconst html = Mustache.render(template, data);\n-\t\t\treturn res.type('text/html').send(html);\n-\t\t} catch (error) {\n-\t\t\tclient.log.error.http(error);\n-\t\t\treturn res.code(500).send({\n-\t\t\t\terror: 'Internal Server Error',\n-\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n-\t\t\t\tstatusCode: 500,\n-\t\t\t});\n-\t\t}\n-\t},\n });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737686425342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,18 +57,31 @@\n \t\t\t\tif (message.author?.displayName) message.author.displayName = decrypt(message.author.displayName);\n \n \t\t\t\t// Decrypt message content\n \t\t\t\tmessage.content = JSON.parse(decrypt(message.content));\n-\t\t\t\tmessage.text = message.content.content?.replace(/\\n/g, '\\n\\t') ?? '';\n-\t\t\t\tmessage.content.attachments?.forEach(a => (message.text += '\\n\\t' + a.url));\n-\t\t\t\tmessage.content.embeds?.forEach(() => (message.text += '\\n\\t[embedded content]'));\n \t\t\t});\n \n \t\t\tconst templatePath = path.join(process.cwd(), 'src', 'user', 'templates', 'transcript.html');\n \t\t\tconst template = fs.readFileSync(templatePath, 'utf8');\n \n \t\t\tconst data = {\n-\t\t\t\tticket,\n+\t\t\t\tticket: {\n+\t\t\t\t\t...ticket,\n+\t\t\t\t\tcreatedAt: ticket.createdAt ? new Date(ticket.createdAt).toLocaleString() : 'N/A',\n+\t\t\t\t\tclosedAt: ticket.closedAt ? new Date(ticket.closedAt).toLocaleString() : 'N/A',\n+\t\t\t\t\tclosedReason: ticket.closedReason || 'No reason provided',\n+\t\t\t\t\ttopic: ticket.topic || 'No topic provided',\n+\t\t\t\t\tcreatedBy: ticket.createdBy ? {\n+\t\t\t\t\t\t...ticket.createdBy,\n+\t\t\t\t\t\tusername: ticket.createdBy.username || 'Unknown',\n+\t\t\t\t\t\tdisplayName: ticket.createdBy.displayName || 'Unknown'\n+\t\t\t\t\t} : { username: 'Unknown', displayName: 'Unknown' },\n+\t\t\t\t\tclosedBy: ticket.closedBy ? {\n+\t\t\t\t\t\t...ticket.closedBy,\n+\t\t\t\t\t\tusername: ticket.closedBy.username || 'Unknown',\n+\t\t\t\t\t\tdisplayName: ticket.closedBy.displayName || 'Unknown'\n+\t\t\t\t\t} : { username: 'Unknown', displayName: 'Unknown' }\n+\t\t\t\t},\n \t\t\t\tguildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n \t\t\t\ttimestamp: new Date().toLocaleString(),\n \t\t\t\tmessages: ticket.archivedMessages.map(msg => ({\n \t\t\t\t\t...msg,\n@@ -92,5 +105,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n\\ No newline at end of file\n+});\n"
                },
                {
                    "date": 1737686427359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,5 +105,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737686618151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,11 +87,12 @@\n \t\t\t\t\t...msg,\n \t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n \t\t\t\t\tauthor: {\n \t\t\t\t\t\t...msg.author,\n+\t\t\t\t\t\tname: msg.author.displayName || msg.author.username || 'Unknown',\n \t\t\t\t\t\tavatarURL: msg.author.avatar\n-\t\t\t\t\t\t\t? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png`\n-\t\t\t\t\t\t\t: `https://cdn.discordapp.com/embed/avatars/${Number(msg.author.discriminator) % 5}.png`\n+\t\t\t\t\t\t\t? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png?size=128`\n+\t\t\t\t\t\t\t: `https://cdn.discordapp.com/embed/avatars/${Number(msg.author.discriminator) % 5}.png?size=128`\n \t\t\t\t\t}\n \t\t\t\t}))\n \t\t\t};\n \n@@ -105,5 +106,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n\\ No newline at end of file\n+});\n"
                },
                {
                    "date": 1737686618720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,5 +106,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n+});\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737686786949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,14 +86,14 @@\n \t\t\t\tmessages: ticket.archivedMessages.map(msg => ({\n \t\t\t\t\t...msg,\n \t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n \t\t\t\t\tauthor: {\n-\t\t\t\t\t\t...msg.author,\n-\t\t\t\t\t\tname: msg.author.displayName || msg.author.username || 'Unknown',\n-\t\t\t\t\t\tavatarURL: msg.author.avatar\n-\t\t\t\t\t\t\t? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png?size=128`\n-\t\t\t\t\t\t\t: `https://cdn.discordapp.com/embed/avatars/${Number(msg.author.discriminator) % 5}.png?size=128`\n-\t\t\t\t\t}\n+                        ...msg.author,\n+                        name: msg.author.displayName || msg.author.username || 'Unknown',\n+                        avatarURL: msg.author?.id && msg.author.avatar\n+                            ? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png?size=128`\n+                            : `https://cdn.discordapp.com/embed/avatars/0.png`\n+                    }\n \t\t\t\t}))\n \t\t\t};\n \n \t\t\tconst html = Mustache.render(template, data);\n@@ -106,5 +106,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n\\ No newline at end of file\n+});\n"
                },
                {
                    "date": 1737686822716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,11 +87,11 @@\n \t\t\t\t\t...msg,\n \t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n \t\t\t\t\tauthor: {\n                         ...msg.author,\n-                        name: msg.author.displayName || msg.author.username || 'Unknown',\n-                        avatarURL: msg.author?.id && msg.author.avatar\n-                            ? `https://cdn.discordapp.com/avatars/${msg.author.id}/${msg.author.avatar}.png?size=128`\n+                        name: msg.author?.displayName || msg.author?.username || 'Unknown',\n+                        avatarURL: msg.author?.userId && msg.author?.avatar\n+                            ? `https://cdn.discordapp.com/avatars/${msg.author.userId}/${msg.author.avatar}.png?size=128`\n                             : `https://cdn.discordapp.com/embed/avatars/0.png`\n                     }\n \t\t\t\t}))\n \t\t\t};\n@@ -106,5 +106,5 @@\n \t\t\t\tstatusCode: 500,\n \t\t\t});\n \t\t}\n \t},\n-});\n\\ No newline at end of file\n+});\n"
                },
                {
                    "date": 1737687009248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,116 @@\n+const fs = require('fs');\n+const path = require('path');\n+const marked = require('marked');\n+const Mustache = require('mustache');\n+const Cryptr = require('cryptr');\n+const { decrypt } = new Cryptr(process.env.ENCRYPTION_KEY);\n+\n+module.exports.get = fastify => ({\n+\thandler: async (req, res) => {\n+\t\t/** @type {import('client')} */\n+\t\tconst client = req.routeOptions.config.client;\n+\t\tconst ticketId = req.params.id;\n+\n+\t\ttry {\n+\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n+\t\t\t\tinclude: {\n+\t\t\t\t\tcategory: true,\n+\t\t\t\t\tcreatedBy: true,\n+\t\t\t\t\tclosedBy: true,\n+\t\t\t\t\tclaimedBy: true,\n+\t\t\t\t\tfeedback: true,\n+\t\t\t\t\tarchivedMessages: {\n+\t\t\t\t\t\tinclude: {\n+\t\t\t\t\t\t\tauthor: true\n+\t\t\t\t\t\t},\n+\t\t\t\t\t\torderBy: { createdAt: 'asc' }\n+\t\t\t\t\t}\n+\t\t\t\t},\n+\t\t\t\twhere: { id: ticketId },\n+\t\t\t});\n+\n+\t\t\tif (!ticket) {\n+\t\t\t\treturn res.code(404).send({\n+\t\t\t\t\terror: 'Not Found',\n+\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n+\t\t\t\t\tstatusCode: 404,\n+\t\t\t\t});\n+\t\t\t}\n+\n+\t\t\t// Decrypt ticket metadata\n+\t\t\tif (ticket.closedReason) ticket.closedReason = decrypt(ticket.closedReason);\n+\t\t\tif (ticket.feedback?.comment) ticket.feedback.comment = decrypt(ticket.feedback.comment);\n+\t\t\tif (ticket.topic) ticket.topic = decrypt(ticket.topic);\n+\n+\t\t\t// Decrypt user information\n+\t\t\tif (ticket.createdBy?.username) ticket.createdBy.username = decrypt(ticket.createdBy.username);\n+\t\t\tif (ticket.createdBy?.displayName) ticket.createdBy.displayName = decrypt(ticket.createdBy.displayName);\n+\t\t\tif (ticket.closedBy?.username) ticket.closedBy.username = decrypt(ticket.closedBy.username);\n+\t\t\tif (ticket.closedBy?.displayName) ticket.closedBy.displayName = decrypt(ticket.closedBy.displayName);\n+\t\t\tif (ticket.claimedBy?.username) ticket.claimedBy.username = decrypt(ticket.claimedBy.username);\n+\t\t\tif (ticket.claimedBy?.displayName) ticket.claimedBy.displayName = decrypt(ticket.claimedBy.displayName);\n+\n+\t\t\t// Decrypt and process archived messages\n+\t\t\tticket.archivedMessages.forEach((message, i) => {\n+\t\t\t\t// Decrypt author information\n+\t\t\t\tif (message.author?.username) message.author.username = decrypt(message.author.username);\n+\t\t\t\tif (message.author?.displayName) message.author.displayName = decrypt(message.author.displayName);\n+\n+\t\t\t\t// Decrypt message content\n+\t\t\t\tmessage.content = JSON.parse(decrypt(message.content));\n+\t\t\t});\n+\n+\t\t\tconst templatePath = path.join(process.cwd(), 'src', 'user', 'templates', 'transcript.html');\n+\t\t\tconst template = fs.readFileSync(templatePath, 'utf8');\n+\n+\t\t\tconst data = {\n+\t\t\t\tticket: {\n+\t\t\t\t\t...ticket,\n+\t\t\t\t\tcreatedAt: ticket.createdAt ? new Date(ticket.createdAt).toLocaleString() : 'N/A',\n+\t\t\t\t\tclosedAt: ticket.closedAt ? new Date(ticket.closedAt).toLocaleString() : 'N/A',\n+\t\t\t\t\tclosedReason: ticket.closedReason || 'No reason provided',\n+\t\t\t\t\ttopic: ticket.topic || 'No topic provided',\n+\t\t\t\t\tcreatedBy: ticket.createdBy ? {\n+\t\t\t\t\t\t...ticket.createdBy,\n+\t\t\t\t\t\tusername: ticket.createdBy.username || 'Unknown',\n+\t\t\t\t\t\tdisplayName: ticket.createdBy.displayName || 'Unknown'\n+\t\t\t\t\t} : { username: 'Unknown', displayName: 'Unknown' },\n+\t\t\t\t\tclosedBy: ticket.closedBy ? {\n+\t\t\t\t\t\t...ticket.closedBy,\n+\t\t\t\t\t\tusername: ticket.closedBy.username || 'Unknown',\n+\t\t\t\t\t\tdisplayName: ticket.closedBy.displayName || 'Unknown'\n+\t\t\t\t\t} : { username: 'Unknown', displayName: 'Unknown' }\n+\t\t\t\t},\n+\t\t\t\tguildName: client.guilds.cache.get(ticket.guildId)?.name || 'Unknown Server',\n+\t\t\t\ttimestamp: new Date().toLocaleString(),\n+\t\t\t\tmessages: ticket.archivedMessages.map(msg => ({\n+\t\t\t\t\t...msg,\n+\t\t\t\t\tcreatedAt: new Date(msg.createdAt).toLocaleString(),\n+\t\t\t\t\tauthor: {\n+                        ...msg.author,\n+                        name: msg.author?.displayName || msg.author?.username || 'Unknown',\n+                        avatarURL: msg.author?.userId && msg.author?.avatar\n+                            ? `https://cdn.discordapp.com/avatars/${msg.author.userId}/${msg.author.avatar}.png?size=128`\n+                            : `https://cdn.discordapp.com/embed/avatars/0.png`\n+                    },\n+                    embeds: msg.content.embeds?.map(embed => ({\n+                        ...embed,\n+                        color: embed.color ? `#${embed.color.toString(16).padStart(6, '0')}` : null,\n+                        timestamp: embed.timestamp ? new Date(embed.timestamp).toLocaleString() : null\n+                    })) || [],\n+                    attachments: msg.content.attachments || []\n+\t\t\t\t}))\n+\t\t\t};\n+\n+\t\t\tconst html = Mustache.render(template, data);\n+\t\t\treturn res.type('text/html').send(html);\n+\t\t} catch (error) {\n+\t\t\tclient.log.error.http(error);\n+\t\t\treturn res.code(500).send({\n+\t\t\t\terror: 'Internal Server Error',\n+\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n+\t\t\t\tstatusCode: 500,\n+\t\t\t});\n+\t\t}\n+\t},\n+});\n"
                }
            ],
            "date": 1737684397746,
            "name": "Commit-0",
            "content": "module.exports.get = fastify => ({\n\thandler: async (req, res) => {\n\t\t/** @type {import('client')} */\n\t\tconst client = req.routeOptions.config.client;\n\t\tconst ticketId = req.params.id;\n\n\t\ttry {\n\t\t\tconst ticket = await client.prisma.ticket.findUnique({\n\t\t\t\twhere: { id: ticketId },\n\t\t\t});\n\n\t\t\tif (!ticket) {\n\t\t\t\treturn res.code(404).send({\n\t\t\t\t\terror: 'Not Found',\n\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n\t\t\t\t\tstatusCode: 404,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst transcriptPath = `./user/transcripts/${ticketId}.md`;\n\t\t\tif (!fs.existsSync(transcriptPath)) {\n\t\t\t\treturn res.code(404).send({\n\t\t\t\t\terror: 'Not Found',\n\t\t\t\t\tmessage: 'The requested transcript could not be found.',\n\t\t\t\t\tstatusCode: 404,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst transcript = fs.readFileSync(transcriptPath, 'utf8');\n\t\t\treturn res.type('text/markdown').send(transcript);\n\t\t} catch (error) {\n\t\t\tclient.log.error.http(error);\n\t\t\treturn res.code(500).send({\n\t\t\t\terror: 'Internal Server Error',\n\t\t\t\tmessage: 'An error occurred while retrieving the transcript.',\n\t\t\t\tstatusCode: 500,\n\t\t\t});\n\t\t}\n\t},\n});"
        }
    ]
}